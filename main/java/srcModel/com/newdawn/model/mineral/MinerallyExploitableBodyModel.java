package com.newdawn.model.mineral;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;

/**
 *
 * @author Pierrick Puimean-Chieze
 */
public class MinerallyExploitableBodyModel {

    private IntegerProperty initialDiscoveryPointsProperty;
    private int pointsMaxForInitialDiscovery;
    
    private Map<Mineral, MineralModel> mineralModels = new HashMap<>();

    public MinerallyExploitableBodyModel(List<MineralModel> mineralsModel, int pointsMaxForInitialDiscovery) {
        this.pointsMaxForInitialDiscovery = pointsMaxForInitialDiscovery;
        for (MineralModel mineralModel : mineralsModel) {
            this.mineralModels.put(mineralModel.getMineral(), mineralModel);
        }
    }

    public IntegerProperty initialDiscoveryPointsProperty() {
        if (initialDiscoveryPointsProperty == null) {
            initialDiscoveryPointsProperty = new SimpleIntegerProperty(this, "initialDiscoveryPoints", 0);
        }
        return initialDiscoveryPointsProperty;
    }

    /**
     * Get the value of initialDiscoveryPoints
     *
     * @return the value of initialDiscoveryPoints
     */
    public int getInitialDiscoveryPoints() {
        return initialDiscoveryPointsProperty().getValue();
    }

    /**
     * Set the value of initialDiscoveryPoints
     *
     * @param initialDiscoveryPoints new value of initialDiscoveryPoints
     */
    public void setInitialDiscoveryPoints(int initialDiscoveryPoints) {
        this.initialDiscoveryPointsProperty().setValue(initialDiscoveryPoints);
    }

    public MineralModel getMineralModel(Mineral mineral) {
        return mineralModels.get(mineral);
    }

    public int getPointsMaxForInitialDiscovery() {
        return pointsMaxForInitialDiscovery;
    }

    public void discoverInitialQuantities() {
        assert getInitialDiscoveryPoints() >= getPointsMaxForInitialDiscovery();
        for (MineralModel mineralModel : mineralModels.values()) {
            mineralModel.discoverInitial();
        }
    }

    public List<MineralDeposit> getMostAccessiblesDeposit() {
        List<MineralDeposit> toReturn = new ArrayList<>();
        for (MineralModel mineralModel : mineralModels.values()) {
            List<MineralDeposit> discoveredDeposits = mineralModel.
                    getDiscoveredDeposits();
            if (discoveredDeposits.isEmpty() || mineralModel.isFinalized()) {
                continue;
            }
            MineralDeposit mineralDeposit = discoveredDeposits.get(0);
            if (!toReturn.isEmpty() && mineralDeposit.getSkillLevelToDiscover()<toReturn.get(0).getSkillLevelToDiscover()) {
                toReturn.clear();
            }
            toReturn.add(mineralDeposit);
        }
        return toReturn;
    }
}
