package com.newdawn.model.mineral;

import com.newdawn.model.personnel.team.FieldTeam;
import com.newdawn.model.personnel.team.GeologicalTeam;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.beans.property.*;

/**
 * 
 * @author Pierrick Puimean-Chieze
 */
public class MinerallyExploitableBodyModel {

	private LongProperty initialDiscoveryPointsProperty;
	// TODO replace by a const.
	private int pointsMaxForInitialDiscovery;
	private boolean initialDiscovered = false;
	private ObjectProperty<GeologicalTeam> geologicalTeamProperty = new SimpleObjectProperty<>(
			this, "geologicalTeam");
	private int finalisationSkill;
	private long finalizationPoints;
	private long pointNeededForFinalization;
	private boolean finalized = false;
	private Map<Mineral, MineralModel> mineralModels = new HashMap<>();

	public MinerallyExploitableBodyModel(List<MineralModel> mineralsModel,
			int pointsNeededForInitialDiscovery, int finalisationSkill,
			int pointsNeededForFinalization) {
		this.pointsMaxForInitialDiscovery = pointsNeededForInitialDiscovery;
		this.finalisationSkill = finalisationSkill;
		this.finalizationPoints = 0;
		this.pointNeededForFinalization = pointsNeededForFinalization;
		// TODO an assertion to be sure than no mineralLevel skill
		for (MineralModel mineralModel : mineralsModel) {
			this.mineralModels.put(mineralModel.getMineral(), mineralModel);
		}
	}

	public int getFinalisationSkill() {
		return finalisationSkill;
	}

	public long getFinalizationPoints() {
		return finalizationPoints;
	}

	public void setFinalizationPoints(long finalizationPoints) {
		this.finalizationPoints = finalizationPoints;
	}

	public long getPointNeededForFinalization() {
		return pointNeededForFinalization;
	}

	public ReadOnlyObjectProperty<GeologicalTeam> geologicalTeamProperty() {
		return geologicalTeamProperty;
	}

	/**
	 * Get the value of geologicalTeam
	 * 
	 * @return the value of geologicalTeam
	 */
	public GeologicalTeam getGeologicalTeam() {
		return geologicalTeamProperty().getValue();
	}

	/**
	 * Set the value of geologicalTeam
	 * 
	 * @param geologicalTeam
	 *            new value of geologicalTeam
	 */
	public void setGeologicalTeam(GeologicalTeam geologicalTeam) {

		this.geologicalTeamProperty.setValue(geologicalTeam);
	}

	public LongProperty initialDiscoveryPointsProperty() {
		if (initialDiscoveryPointsProperty == null) {
			initialDiscoveryPointsProperty = new SimpleLongProperty(this,
					"initialDiscoveryPoints", 0);
		}
		return initialDiscoveryPointsProperty;
	}

	/**
	 * Get the value of initialDiscoveryPoints
	 * 
	 * @return the value of initialDiscoveryPoints
	 */
	public long getInitialDiscoveryPoints() {
		return initialDiscoveryPointsProperty().getValue();
	}

	/**
	 * Set the value of initialDiscoveryPoints
	 * 
	 * @param initialDiscoveryPoints
	 *            new value of initialDiscoveryPoints
	 */
	public void setInitialDiscoveryPoints(long initialDiscoveryPoints) {
		this.initialDiscoveryPointsProperty().setValue(initialDiscoveryPoints);
	}

	public MineralModel getMineralModel(Mineral mineral) {
		return mineralModels.get(mineral);
	}

	public int getPointsMaxForInitialDiscovery() {
		return pointsMaxForInitialDiscovery;
	}

	public void discoverInitialQuantities() {
		assert getInitialDiscoveryPoints() >= getPointsMaxForInitialDiscovery();
		for (MineralModel mineralModel : mineralModels.values()) {
			mineralModel.discoverInitial();
		}
		initialDiscovered = true;
	}

	public List<MineralDeposit> getMostAccessiblesDeposit() {
		List<MineralDeposit> toReturn = new ArrayList<>();
		for (MineralModel mineralModel : mineralModels.values()) {
			List<MineralDeposit> discoveredDeposits = mineralModel
					.getDiscoveredDeposits();
			if (discoveredDeposits.isEmpty() || mineralModel.isFinalized()) {
				continue;
			}
			MineralDeposit mineralDeposit = discoveredDeposits.get(0);
			if (!toReturn.isEmpty()
					&& mineralDeposit.getSkillLevelToDiscover() < toReturn.get(
							0).getSkillLevelToDiscover()) {
				toReturn.clear();
			}
			toReturn.add(mineralDeposit);
		}
		return toReturn;
	}

	public boolean isInitialDiscovered() {
		return initialDiscovered;
	}

	public boolean isFinalized() {
		return finalized;
	}

	public void finalizeProspection() {
		finalized = true;
		for (MineralModel mineralModel : mineralModels.values()) {
			mineralModel.finalizeProspection();
		}
		// TODO Eventually, here, cleanObject for memory usage
	}
}